on:
  pull_request:
    branches:
      - main
env:
  IMAGE_NAME: challenge-api

jobs:
#  build-backend:
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: back
#    needs: [ ci-back, ci-front ]
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: Cache Docker layers
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.docker
#          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
#          restore-keys: |
#            ${{ runner.os }}-docker-
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v3
#        with:
#            username: ${{ secrets.DOCKERHUB_USERNAME }}
#            password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build Docker images
#        uses: docker/bake-action@v4
#        with:
#          workdir: back
#          pull: true
#          load: true
#          files: |
#            docker-compose.yml
#            docker-compose.override.yml
#          set: |
#            *.cache-from=type=gha,scope=${{ github.ref }}
#            *.cache-from=type=gha,scope=refs/heads/main
#            *.cache-to=type=gha,scope=${{ github.ref }},mode=max

#  deploy-backend:
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        working-directory: back
#    needs: [ci-back, ci-front, build-backend]
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          version: latest
#
#      - name: Push
#        uses: docker/build-push-action@v5
#        with:
#            context: back
#            builder: ${{ steps.buildx.outputs.name }}
#            push: true
#            tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
#            cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
#            cache-to: type=inline
#
#      - name: Output Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}


  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [ci-back, ci-front, deploy-backend]
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
