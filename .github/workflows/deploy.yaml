on:
  pull_request:
    branches:
      - main
env:
  IMAGE_NAME: challenge-api

jobs:
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back
    needs: [ ci-back, ci-front ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: |
            ~/.docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker images
        uses: docker/bake-action@v4
        with:
          workdir: back
          pull: true
          load: true
          files: |
            docker-compose.yml
            docker-compose.override.yml
          set: |
            *.cache-from=type=gha,scope=${{ github.ref }}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{ github.ref }},mode=max

  deploy-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: back
    needs: [ci-back, ci-front, build-backend]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Push
        uses: docker/build-push-action@v5
        with:
            context: back
            builder: ${{ steps.buildx.outputs.name }}
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            cache-to: type=inline

      - name: Output Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [ci-back, ci-front, deploy-backend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
